{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "cls = <class '_pytest.runner.CallInfo'>, func = <function call_and_report.<locals>.<lambda> at 0x00000159BCC35B20>, when = 'setup', reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: Callable[[], TResult],\n        when: Literal[\"collect\", \"setup\", \"call\", \"teardown\"],\n        reraise: type[BaseException] | tuple[type[BaseException], ...] | None = None,\n    ) -> CallInfo[TResult]:\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :type func: Callable[[], _pytest.runner.TResult]\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: TResult | None = func()\n\n.venv\\Lib\\site-packages\\_pytest\\runner.py:341: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\_pytest\\runner.py:242: in <lambda>\n    lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise\n.venv\\Lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n.venv\\Lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n.venv\\Lib\\site-packages\\_pytest\\unraisableexception.py:90: in pytest_runtest_setup\n    yield from unraisable_exception_runtest_hook()\n.venv\\Lib\\site-packages\\_pytest\\unraisableexception.py:70: in unraisable_exception_runtest_hook\n    yield\n.venv\\Lib\\site-packages\\_pytest\\logging.py:840: in pytest_runtest_setup\n    yield from self._runtest_for(item, \"setup\")\n.venv\\Lib\\site-packages\\_pytest\\logging.py:829: in _runtest_for\n    yield\n.venv\\Lib\\site-packages\\_pytest\\capture.py:875: in pytest_runtest_setup\n    return (yield)\n.venv\\Lib\\site-packages\\_pytest\\threadexception.py:87: in pytest_runtest_setup\n    yield from thread_exception_runtest_hook()\n.venv\\Lib\\site-packages\\_pytest\\threadexception.py:68: in thread_exception_runtest_hook\n    yield\n.venv\\Lib\\site-packages\\_pytest\\runner.py:160: in pytest_runtest_setup\n    item.session._setupstate.setup(item)\n.venv\\Lib\\site-packages\\_pytest\\runner.py:514: in setup\n    col.setup()\n.venv\\Lib\\site-packages\\_pytest\\python.py:1630: in setup\n    self._request._fillfixtures()\n.venv\\Lib\\site-packages\\_pytest\\fixtures.py:697: in _fillfixtures\n    item.funcargs[argname] = self.getfixturevalue(argname)\n.venv\\Lib\\site-packages\\_pytest\\fixtures.py:532: in getfixturevalue\n    fixturedef = self._get_active_fixturedef(argname)\n.venv\\Lib\\site-packages\\_pytest\\fixtures.py:617: in _get_active_fixturedef\n    fixturedef.execute(request=subrequest)\n.venv\\Lib\\site-packages\\_pytest\\fixtures.py:1091: in execute\n    result = ihook.pytest_fixture_setup(fixturedef=self, request=request)\n.venv\\Lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n.venv\\Lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n.venv\\Lib\\site-packages\\_pytest\\setuponly.py:36: in pytest_fixture_setup\n    return (yield)\n.venv\\Lib\\site-packages\\_pytest\\fixtures.py:1140: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n.venv\\Lib\\site-packages\\_pytest\\fixtures.py:891: in call_fixture_func\n    fixture_result = next(generator)\n.venv\\Lib\\site-packages\\_pytest\\python.py:787: in xunit_setup_class_fixture\n    _call_with_optional_argument(func, cls)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfunc = <function TestCounpang.setup_class at 0x00000159BCC34360>, arg = <class 'tests.test_CoupangMain.TestCounpang'>\n\n    def _call_with_optional_argument(func, arg) -> None:\n        \"\"\"Call the given function with the given argument if func accepts one argument, otherwise\n        calls func without arguments.\"\"\"\n        arg_count = func.__code__.co_argcount\n        if inspect.ismethod(func):\n            arg_count -= 1\n        if arg_count:\n>           func(arg)\nE           TypeError: TestCounpang.setup_class() missing 1 required positional argument: 'setup'\n\n.venv\\Lib\\site-packages\\_pytest\\python.py:715: TypeError\n", "test_name": "test_gnb1", "rerun": "0"}}, "suite_name": "tests/test_CoupangMain.py"}}}, "date": "September 20, 2024", "start_time": 1726821856.8006656, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}