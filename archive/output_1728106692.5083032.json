{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 10}, "tests": {"0": {"status": "ERROR", "message": "@pytest.fixture(scope=\"class\")\n    def setup():\n        # driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options) # \ud06c\ub86c\n>       driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()),options=options)\n\ntests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:45: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B03475B230>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: No matching capabili...28C25C+273372]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCBEF47374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFCC00FCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: No matching capabilities found\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7B92FCEC5+12997]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B957BCA4+1897908]\nE       \t(No symbol) [0x00007FF7B90AF1CC]\nE       \t(No symbol) [0x00007FF7B91209EA]\nE       \t(No symbol) [0x00007FF7B911FF3F]\nE       \t(No symbol) [0x00007FF7B912175F]\nE       \t(No symbol) [0x00007FF7B9117BB3]\nE       \t(No symbol) [0x00007FF7B90EB5AC]\nE       \t(No symbol) [0x00007FF7B90EAA8D]\nE       \t(No symbol) [0x00007FF7B90EB171]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A9DD4+1038052]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B92208BF+56655]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B9213063+1267]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A8B5D+1033325]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9299731+327857]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295BB4+312628]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295CE9+312937]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B928C25C+273372]\nE       \tBaseThreadInitThunk [0x00007FFCBEF47374+20]\nE       \tRtlUserThreadStart [0x00007FFCC00FCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException\n", "test_name": "test_login_landing", "rerun": "0"}, "1": {"status": "ERROR", "message": "@pytest.fixture(scope=\"class\")\n    def setup():\n        # driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options) # \ud06c\ub86c\n>       driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()),options=options)\n\ntests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:45: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B03475B230>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: No matching capabili...28C25C+273372]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCBEF47374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFCC00FCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: No matching capabilities found\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7B92FCEC5+12997]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B957BCA4+1897908]\nE       \t(No symbol) [0x00007FF7B90AF1CC]\nE       \t(No symbol) [0x00007FF7B91209EA]\nE       \t(No symbol) [0x00007FF7B911FF3F]\nE       \t(No symbol) [0x00007FF7B912175F]\nE       \t(No symbol) [0x00007FF7B9117BB3]\nE       \t(No symbol) [0x00007FF7B90EB5AC]\nE       \t(No symbol) [0x00007FF7B90EAA8D]\nE       \t(No symbol) [0x00007FF7B90EB171]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A9DD4+1038052]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B92208BF+56655]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B9213063+1267]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A8B5D+1033325]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9299731+327857]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295BB4+312628]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295CE9+312937]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B928C25C+273372]\nE       \tBaseThreadInitThunk [0x00007FFCBEF47374+20]\nE       \tRtlUserThreadStart [0x00007FFCC00FCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException\n", "test_name": "test_login", "rerun": "0"}, "2": {"status": "ERROR", "message": "@pytest.fixture(scope=\"class\")\n    def setup():\n        # driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options) # \ud06c\ub86c\n>       driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()),options=options)\n\ntests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:45: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B03475B230>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: No matching capabili...28C25C+273372]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCBEF47374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFCC00FCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: No matching capabilities found\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7B92FCEC5+12997]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B957BCA4+1897908]\nE       \t(No symbol) [0x00007FF7B90AF1CC]\nE       \t(No symbol) [0x00007FF7B91209EA]\nE       \t(No symbol) [0x00007FF7B911FF3F]\nE       \t(No symbol) [0x00007FF7B912175F]\nE       \t(No symbol) [0x00007FF7B9117BB3]\nE       \t(No symbol) [0x00007FF7B90EB5AC]\nE       \t(No symbol) [0x00007FF7B90EAA8D]\nE       \t(No symbol) [0x00007FF7B90EB171]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A9DD4+1038052]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B92208BF+56655]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B9213063+1267]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A8B5D+1033325]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9299731+327857]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295BB4+312628]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295CE9+312937]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B928C25C+273372]\nE       \tBaseThreadInitThunk [0x00007FFCBEF47374+20]\nE       \tRtlUserThreadStart [0x00007FFCC00FCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException\n", "test_name": "test_mycoupang_landing", "rerun": "0"}, "3": {"status": "ERROR", "message": "@pytest.fixture(scope=\"class\")\n    def setup():\n        # driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options) # \ud06c\ub86c\n>       driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()),options=options)\n\ntests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:45: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B03475B230>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: No matching capabili...28C25C+273372]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCBEF47374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFCC00FCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: No matching capabilities found\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7B92FCEC5+12997]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B957BCA4+1897908]\nE       \t(No symbol) [0x00007FF7B90AF1CC]\nE       \t(No symbol) [0x00007FF7B91209EA]\nE       \t(No symbol) [0x00007FF7B911FF3F]\nE       \t(No symbol) [0x00007FF7B912175F]\nE       \t(No symbol) [0x00007FF7B9117BB3]\nE       \t(No symbol) [0x00007FF7B90EB5AC]\nE       \t(No symbol) [0x00007FF7B90EAA8D]\nE       \t(No symbol) [0x00007FF7B90EB171]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A9DD4+1038052]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B92208BF+56655]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B9213063+1267]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A8B5D+1033325]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9299731+327857]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295BB4+312628]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295CE9+312937]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B928C25C+273372]\nE       \tBaseThreadInitThunk [0x00007FFCBEF47374+20]\nE       \tRtlUserThreadStart [0x00007FFCC00FCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException\n", "test_name": "test_modify_landing", "rerun": "0"}, "4": {"status": "ERROR", "message": "@pytest.fixture(scope=\"class\")\n    def setup():\n        # driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options) # \ud06c\ub86c\n>       driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()),options=options)\n\ntests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:45: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B03475B230>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: No matching capabili...28C25C+273372]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCBEF47374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFCC00FCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: No matching capabilities found\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7B92FCEC5+12997]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B957BCA4+1897908]\nE       \t(No symbol) [0x00007FF7B90AF1CC]\nE       \t(No symbol) [0x00007FF7B91209EA]\nE       \t(No symbol) [0x00007FF7B911FF3F]\nE       \t(No symbol) [0x00007FF7B912175F]\nE       \t(No symbol) [0x00007FF7B9117BB3]\nE       \t(No symbol) [0x00007FF7B90EB5AC]\nE       \t(No symbol) [0x00007FF7B90EAA8D]\nE       \t(No symbol) [0x00007FF7B90EB171]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A9DD4+1038052]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B92208BF+56655]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B9213063+1267]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A8B5D+1033325]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9299731+327857]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295BB4+312628]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295CE9+312937]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B928C25C+273372]\nE       \tBaseThreadInitThunk [0x00007FFCBEF47374+20]\nE       \tRtlUserThreadStart [0x00007FFCC00FCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException\n", "test_name": "test_checkpw", "rerun": "0"}, "5": {"status": "ERROR", "message": "@pytest.fixture(scope=\"class\")\n    def setup():\n        # driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options) # \ud06c\ub86c\n>       driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()),options=options)\n\ntests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:45: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B03475B230>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: No matching capabili...28C25C+273372]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCBEF47374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFCC00FCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: No matching capabilities found\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7B92FCEC5+12997]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B957BCA4+1897908]\nE       \t(No symbol) [0x00007FF7B90AF1CC]\nE       \t(No symbol) [0x00007FF7B91209EA]\nE       \t(No symbol) [0x00007FF7B911FF3F]\nE       \t(No symbol) [0x00007FF7B912175F]\nE       \t(No symbol) [0x00007FF7B9117BB3]\nE       \t(No symbol) [0x00007FF7B90EB5AC]\nE       \t(No symbol) [0x00007FF7B90EAA8D]\nE       \t(No symbol) [0x00007FF7B90EB171]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A9DD4+1038052]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B92208BF+56655]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B9213063+1267]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A8B5D+1033325]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9299731+327857]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295BB4+312628]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295CE9+312937]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B928C25C+273372]\nE       \tBaseThreadInitThunk [0x00007FFCBEF47374+20]\nE       \tRtlUserThreadStart [0x00007FFCC00FCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException\n", "test_name": "test_dam", "rerun": "0"}, "6": {"status": "ERROR", "message": "@pytest.fixture(scope=\"class\")\n    def setup():\n        # driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options) # \ud06c\ub86c\n>       driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()),options=options)\n\ntests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:45: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B03475B230>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: No matching capabili...28C25C+273372]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCBEF47374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFCC00FCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: No matching capabilities found\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7B92FCEC5+12997]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B957BCA4+1897908]\nE       \t(No symbol) [0x00007FF7B90AF1CC]\nE       \t(No symbol) [0x00007FF7B91209EA]\nE       \t(No symbol) [0x00007FF7B911FF3F]\nE       \t(No symbol) [0x00007FF7B912175F]\nE       \t(No symbol) [0x00007FF7B9117BB3]\nE       \t(No symbol) [0x00007FF7B90EB5AC]\nE       \t(No symbol) [0x00007FF7B90EAA8D]\nE       \t(No symbol) [0x00007FF7B90EB171]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A9DD4+1038052]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B92208BF+56655]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B9213063+1267]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A8B5D+1033325]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9299731+327857]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295BB4+312628]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295CE9+312937]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B928C25C+273372]\nE       \tBaseThreadInitThunk [0x00007FFCBEF47374+20]\nE       \tRtlUserThreadStart [0x00007FFCC00FCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException\n", "test_name": "test_modify_address", "rerun": "0"}, "7": {"status": "ERROR", "message": "@pytest.fixture(scope=\"class\")\n    def setup():\n        # driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options) # \ud06c\ub86c\n>       driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()),options=options)\n\ntests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:45: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B03475B230>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: No matching capabili...28C25C+273372]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCBEF47374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFCC00FCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: No matching capabilities found\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7B92FCEC5+12997]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B957BCA4+1897908]\nE       \t(No symbol) [0x00007FF7B90AF1CC]\nE       \t(No symbol) [0x00007FF7B91209EA]\nE       \t(No symbol) [0x00007FF7B911FF3F]\nE       \t(No symbol) [0x00007FF7B912175F]\nE       \t(No symbol) [0x00007FF7B9117BB3]\nE       \t(No symbol) [0x00007FF7B90EB5AC]\nE       \t(No symbol) [0x00007FF7B90EAA8D]\nE       \t(No symbol) [0x00007FF7B90EB171]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A9DD4+1038052]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B92208BF+56655]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B9213063+1267]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A8B5D+1033325]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9299731+327857]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295BB4+312628]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295CE9+312937]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B928C25C+273372]\nE       \tBaseThreadInitThunk [0x00007FFCBEF47374+20]\nE       \tRtlUserThreadStart [0x00007FFCC00FCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException\n", "test_name": "test_modify_info", "rerun": "0"}, "8": {"status": "ERROR", "message": "@pytest.fixture(scope=\"class\")\n    def setup():\n        # driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options) # \ud06c\ub86c\n>       driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()),options=options)\n\ntests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:45: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B03475B230>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: No matching capabili...28C25C+273372]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCBEF47374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFCC00FCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: No matching capabilities found\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7B92FCEC5+12997]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B957BCA4+1897908]\nE       \t(No symbol) [0x00007FF7B90AF1CC]\nE       \t(No symbol) [0x00007FF7B91209EA]\nE       \t(No symbol) [0x00007FF7B911FF3F]\nE       \t(No symbol) [0x00007FF7B912175F]\nE       \t(No symbol) [0x00007FF7B9117BB3]\nE       \t(No symbol) [0x00007FF7B90EB5AC]\nE       \t(No symbol) [0x00007FF7B90EAA8D]\nE       \t(No symbol) [0x00007FF7B90EB171]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A9DD4+1038052]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B92208BF+56655]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B9213063+1267]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A8B5D+1033325]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9299731+327857]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295BB4+312628]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295CE9+312937]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B928C25C+273372]\nE       \tBaseThreadInitThunk [0x00007FFCBEF47374+20]\nE       \tRtlUserThreadStart [0x00007FFCC00FCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException\n", "test_name": "test_modify_back", "rerun": "0"}, "9": {"status": "ERROR", "message": "@pytest.fixture(scope=\"class\")\n    def setup():\n        # driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options) # \ud06c\ub86c\n>       driver = webdriver.Edge(service=Service(EdgeChromiumDriverManager().install()),options=options)\n\ntests\\conftest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:45: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B03475B230>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: No matching capabili...28C25C+273372]\\\\n\\\\tBaseThreadInitThunk [0x00007FFCBEF47374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFCC00FCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: No matching capabilities found\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7B92FCEC5+12997]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B957BCA4+1897908]\nE       \t(No symbol) [0x00007FF7B90AF1CC]\nE       \t(No symbol) [0x00007FF7B91209EA]\nE       \t(No symbol) [0x00007FF7B911FF3F]\nE       \t(No symbol) [0x00007FF7B912175F]\nE       \t(No symbol) [0x00007FF7B9117BB3]\nE       \t(No symbol) [0x00007FF7B90EB5AC]\nE       \t(No symbol) [0x00007FF7B90EAA8D]\nE       \t(No symbol) [0x00007FF7B90EB171]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A9DD4+1038052]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B92208BF+56655]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7B9213063+1267]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7B94A8B5D+1033325]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9299731+327857]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295BB4+312628]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B9295CE9+312937]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7B928C25C+273372]\nE       \tBaseThreadInitThunk [0x00007FFCBEF47374+20]\nE       \tRtlUserThreadStart [0x00007FFCC00FCC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException\n", "test_name": "test_order_sort", "rerun": "0"}}, "suite_name": "tests/test_MyCoupang.py"}}}, "date": "October 05, 2024", "start_time": 1728106531.9595864, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "10", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "10"}